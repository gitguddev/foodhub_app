{"version":3,"sources":["utils/apiFetcher.js","utils/config.js","utils/Loader.js","route/Route.js","Auth.js","App.js","serviceWorker.js","index.js"],"names":["API","API_PROTOCOL","API_ADDRESS","apiFetcher","url","option","restaurant","opt","window","localStorage","getItem","headers","Authorization","fetch","Accept","mode","then","res","json","catch","err","message","authedFetcher","useAuthAPI","history","useHistory","useAsync","promiseFn","onResolve","data","push","alert","removeItem","SERVER_ADDRESS","PROTOCOL","SOCKET_ADDRESS","SOCKET_PROTOCOL","SOCKET_PORT","LoaderContainer","styled","div","Loader","props","type","color","Manager","lazy","Restaurant","Bill","Landing","Auther","a","restaurant_id","table_number","storage","Error","console","log","setItem","result","Auth","useParams","error","to","App","className","basename","process","fallback","path","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8f54d9d3.chunk.js","sourcesContent":["import { useAsync } from \"react-async\";\nimport { useHistory } from \"react-router-dom\";\nimport { API_ADDRESS, API_PROTOCOL } from \"./config\";\n\nconst API = `${API_PROTOCOL}://${API_ADDRESS}`;\n\nfunction apiFetcher({ url, option, restaurant }) {\n  // const mode = window.localStorage.getItem(\"jwt\") ? \"worker\" : \"manager\";\n  let opt = { ...option };\n  if (window.localStorage.getItem(\"jwt\") && !restaurant) {\n    if (!opt.headers) opt.headers = {};\n    if (!opt.headers.Authorization)\n      opt.headers.Authorization =\n        \"Bearer \" + window.localStorage.getItem(\"jwt\");\n  }\n\n  return fetch(`${API}${url}`, {\n    headers: { Accept: \"application/json\" },\n    mode: \"cors\",\n    ...opt,\n  })\n    .then((res) => res.json())\n    .catch((err) => ({ message: err }));\n}\n\nfunction authedFetcher({ url, option }) {\n  return apiFetcher({\n    url,\n    restaurant: true,\n    option: {\n      headers: {\n        Authorization: \"Bearer \" + window.localStorage.getItem(\"auth\"),\n        Accept: \"application/json\",\n      },\n    },\n  });\n}\n\nfunction useAuthAPI(url, option) {\n  const history = useHistory();\n  const result = useAsync({\n    promiseFn: authedFetcher,\n    url,\n    ...option,\n    onResolve(data) {\n      switch (data.message) {\n        case \"session ended\":\n          // alert(\"เซสชั่นหมดอายุแล้ว\");\n          // window.localStorage.removeItem(\"auth\");\n          history.push(\"/bill\");\n          break;\n        case \"billing\":\n          history.push(\"/restaurant/cart/billing\");\n          break;\n        case \"token parse error\":\n          alert(\"token ไม่ถูกต้อง\");\n          window.localStorage.removeItem(\"auth\");\n          history.push(\"/error\");\n          break;\n        case !\"success\":\n          alert(\"เกิดข้อผิดพลาดขึ้น\");\n          history.push(\"/error\");\n          break;\n        default:\n          break;\n      }\n    },\n  });\n\n  return result;\n}\n\nexport default apiFetcher;\nexport { authedFetcher, useAuthAPI };\n","let SERVER_ADDRESS = \"localhost\";\nlet PROTOCOL = \"http\";\n\nlet API_ADDRESS = \"localhost/foodhub_api\";\nlet API_PROTOCOL = \"http\";\n\nlet SOCKET_ADDRESS = \"localhost\";\nlet SOCKET_PROTOCOL = \"http\";\nlet SOCKET_PORT = 5000;\n\nif (process.env.NODE_ENV === \"development\") {\n  SERVER_ADDRESS = \"localhost\";\n  PROTOCOL = \"http\";\n\n  API_ADDRESS = \"localhost/foodhub_api\";\n  API_PROTOCOL = \"http\";\n\n  SOCKET_ADDRESS = \"localhost\";\n  SOCKET_PROTOCOL = \"http\";\n  SOCKET_PORT = 5000;\n} else {\n  SERVER_ADDRESS = \"35.247.129.108/foodhub_app\";\n  PROTOCOL = \"http\";\n\n  API_ADDRESS = \"35.247.129.108/foodhub_api\";\n  API_PROTOCOL = \"http\";\n\n  SOCKET_ADDRESS = \"35.247.129.108\";\n  SOCKET_PROTOCOL = \"http\";\n  SOCKET_PORT = 5000;\n}\n\nexport {\n  SERVER_ADDRESS,\n  PROTOCOL,\n  API_ADDRESS,\n  API_PROTOCOL,\n  SOCKET_ADDRESS,\n  SOCKET_PROTOCOL,\n  SOCKET_PORT,\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { default as ReactLoader } from \"react-loader-spinner\";\nconst LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: 100vw;\n  position: fixed;\n  top: 0;\n  left: 0;\n`;\n\nfunction Loader(props) {\n  return (\n    <LoaderContainer>\n      <ReactLoader type=\"ThreeDots\" color=\"#aaa\" {...props} />\n    </LoaderContainer>\n  );\n}\n\nexport default Loader;\n","import { lazy } from \"react\";\n\nconst Manager = lazy(() => import(\"./manager/Manager\"));\nconst Restaurant = lazy(() => import(\"./restaurant/Restaurant\"));\nconst Bill = lazy(() => import(\"./restaurant/Bill\"));\nconst Landing = lazy(() => import(\"./Landing\"));\n\nexport { Manager, Restaurant, Bill, Landing };\n","import React from \"react\";\nimport apiFetcher, { authedFetcher } from \"./utils/apiFetcher\";\nimport { useParams, Redirect, useHistory } from \"react-router-dom\";\nimport { useAsync } from \"react-async\";\n\nasync function Auther({ restaurant_id, table_number, history }) {\n  const storage = window.localStorage;\n  if (storage.getItem(\"auth\")) {\n    const json = await authedFetcher({\n      url: `/manager/checkAuth.php?restaurant_id=${restaurant_id}&table_number=${table_number}`,\n    });\n\n    switch (json.message) {\n      case \"success\":\n        return {\n          message: \"success\",\n        };\n      case \"billing\":\n        return { message: \"billing\" };\n      case \"session ended\":\n        history.push(\"/bill\");\n        // alert(\"เซสชั่นหมดอายุแล้ว\");\n        // throw new Error(json.message);\n        break;\n      case \"token parse error\":\n        storage.removeItem(\"auth\");\n        alert(\"token ไม่ถูกต้อง\");\n        throw new Error(json.message);\n      default:\n        throw new Error(json.message);\n    }\n  } else {\n    const json = await apiFetcher({\n      url: `/manager/auth.php?restaurant_id=${restaurant_id}&table_number=${table_number}`,\n      restaurant: true,\n    });\n\n    switch (json.message) {\n      case \"success\":\n        console.log(\"success\");\n        storage.setItem(\"auth\", json.result);\n        return {\n          message: \"success\",\n        };\n      case \"already has session\":\n        alert(\"มีคนนั่งอยู่ที่โต๊ะนี้อยู่แล้ว\");\n        throw new Error(json.message);\n      case \"token encode error\":\n        storage.removeItem(\"auth\");\n        alert(\"เกิดข้อผิดพลาดในการเข้าสู่ระบบ\");\n        throw new Error(json.message);\n      default:\n        throw new Error(json.message);\n    }\n  }\n}\n\nfunction Auth() {\n  const history = useHistory();\n  const { restaurant_id, table_number } = useParams();\n\n  const { data, error } = useAsync({\n    promiseFn: Auther,\n    restaurant_id,\n    table_number,\n    history,\n  });\n\n  if (error) return <Redirect to={`/error`} />;\n  if (data?.message === \"success\") {\n    return <Redirect to={`/restaurant`} />;\n  } else if (data?.message === \"billing\") {\n    return <Redirect to={`/restaurant/cart/billing`} />;\n  }\n  return \"Authenticationing...\";\n}\n\nexport default Auth;\n","import React, { Suspense } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Restaurant, Manager, Bill, Landing } from \"./route/Route\";\nimport Auth from \"./Auth\";\nimport Loader from \"./utils/Loader\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Suspense fallback={<Loader />}>\n          <Switch>\n            <Route path=\"/manager\" component={Manager} />\n            <Route\n              path=\"/restaurant/auth/:restaurant_id/:table_number\"\n              component={Auth}\n            />\n            <Route path=\"/restaurant\" component={Restaurant} />\n            <Route path=\"/bill\" component={Bill} />\n            <Route path=\"/getting-started\">\n              <div>Getting Started</div>\n            </Route>\n            <Route path=\"/\">\n              <Landing />\n            </Route>\n          </Switch>\n        </Suspense>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}